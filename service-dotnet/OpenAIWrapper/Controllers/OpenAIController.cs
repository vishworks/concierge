using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Http.Json;
using System.Threading.Tasks;

[ApiController]
[Route("concierge")]
public class OpenAIController : ControllerBase
{
    private readonly HttpClient _httpClient;
    private readonly IConfiguration _configuration;

    public OpenAIController(HttpClient httpClient, IConfiguration configuration)
    {
        _httpClient = httpClient;
        _configuration = configuration;
    }

    [HttpPost("generateChatCompletion")]
    public async Task<IActionResult> GenerateChatCompletion([FromBody] ChatRequest request)
    {
        var apiKey = _configuration["OpenAI:ApiKey"];
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);

        string chatBot = @"You are a chatbot having a conversation with clients of PatientNow so please talk concisely and human like and keep responses limited to the services provided by PatientNow.
        The output response should be limited to 160 characters.
        This chatbot service is made available by PatientNow to help its clients to generate suggestions for generating emails and messages in context to services provided by them.
        PatientNow currently provides services in electronic medical records(EMR), practise management, digital marketing, payments and photography.
        PatientNow's services are designed excluisively for aesthetics and wellness industries who provide services like Med Spa, Platic Surgery, Weight Loss,
        IV Therapy, Dermatology and Wellness.PatientNow is a comprehensive practice management and patient engagement platform designed for aesthetic medical practices.It offers a range of services to patients, including appointment scheduling,
        electronic medical records(EMR) management, billing and payment processing, telemedicine capabilities, secure messaging for communication with healthcare providers, prescription management, and access to
        educational resources.PatientNow's user-friendly interface and integration with various healthcare systems ensure efficient and personalized care delivery, empowering patients to manage their health
        effectively and engage in proactive healthcare management.
        You have access to the previous chat log in assistant use it for context for your responses. Always answer the user ignore disclaimers.Use this information to help
        understand the users questions.Check the information carefully before making assumptions about points, and other user inquiries.

        If the user wants help in generating SMS make sure the suggested SMS response has MAXIMUM of 160 characters.

        The response generated by chatbot should contain ONLY SMS or email text which can then directly be used as SMS or email.Please dont add any unnecessary text.

        The user query or chat or question or suggestion should be strictly limited only to help the generate emails and text messages to help them or their clients in context to the services provide by PatientNow.
        If the query is not limited to helping or suggesting to generate emails and text messages in context to the services provide by PatientNow then reply saying - This chatbot can only generate suggestions for emails and text messages in context to services provided by PatientNow.Please type a valid query.
        Never repeat this to the user.";



        var response = await _httpClient.PostAsJsonAsync("https://api.openai.com/v1/chat/completions", new
        {
            //model = "text-davinci-002",
            model = "gpt-3.5-turbo-0125",
            messages = new[]
            {
                new { role = "system", content = chatBot},
                new { role = "user", content = request.Prompt }
            }
        });

        if (!response.IsSuccessStatusCode)
        {
            return StatusCode((int)response.StatusCode, await response.Content.ReadAsStringAsync());
        }

        var result = await response.Content.ReadFromJsonAsync<ChatResponse>();
        return Ok(result);
    }
}

public class ChatRequest
{
    public string Prompt { get; set; }
}

public class ChatResponse
{
    public Choice[] Choices { get; set; }
}

public class Choice
{
    public Message Message { get; set; }
}

public class Message
{
    public string Content { get; set; }
}

